'use strict';var zod=require('zod');var n=zod.z.object({id:zod.z.string(),title:zod.z.string(),type:zod.z.enum(["emergency","user","system","custom"]),status:zod.z.enum(["pending","completed","failed"]),generatedBy:zod.z.string(),createdAt:zod.z.string(),fileSize:zod.z.string()}),i=zod.z.object({type:zod.z.enum(["emergency","user","system","custom"]),dateRange:zod.z.object({start:zod.z.string(),end:zod.z.string()}),format:zod.z.enum(["pdf","csv","excel"]),filters:zod.z.record(zod.z.any())}),r=class extends Error{constructor(s,a){super(a);this.status=s;this.name="APIError";}},c=async()=>{let o=await fetch("/api/reports");if(!o.ok)throw new r(o.status,"Failed to fetch reports");let t=await o.json();return n.array().parse(t)},d=async o=>{let t=await fetch("/api/reports/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok)throw new r(t.status,"Failed to generate report");let s=await t.json();return n.parse(s)},m=async o=>{let t=await fetch(`/api/reports/${o}/download`);if(!t.ok)throw new r(t.status,"Failed to download report");return t.blob()},f=async o=>{let t=await fetch(`/api/reports/${o}`,{method:"DELETE"});if(!t.ok)throw new r(t.status,"Failed to delete report")};exports.APIError=r;exports.ReportConfigSchema=i;exports.ReportSchema=n;exports.deleteReport=f;exports.downloadReport=m;exports.fetchReports=c;exports.generateReport=d;//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map