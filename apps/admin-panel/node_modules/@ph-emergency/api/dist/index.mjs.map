{"version":3,"sources":["../src/index.ts"],"names":["ReportSchema","z","ReportConfigSchema","APIError","status","message","fetchReports","response","data","generateReport","config","downloadReport","reportId","deleteReport"],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from 'zod';\r\n\r\nexport const ReportSchema = z.object({\r\n  id: z.string(),\r\n  title: z.string(),\r\n  type: z.enum(['emergency', 'user', 'system', 'custom']),\r\n  status: z.enum(['pending', 'completed', 'failed']),\r\n  generatedBy: z.string(),\r\n  createdAt: z.string(),\r\n  updatedAt: z.string(),\r\n  fileSize: z.string(),\r\n  format: z.enum(['pdf', 'csv', 'excel']).optional(),\r\n  dateRange: z.object({\r\n    start: z.string(),\r\n    end: z.string(),\r\n  }).optional(),\r\n  incidentDetails: z.object({\r\n    incidentId: z.number(),\r\n    cause: z.string(),\r\n    casualties: z.object({\r\n      fatalities: z.number(),\r\n      injuries: z.number(),\r\n      missing: z.number(),\r\n    }),\r\n    propertyDamage: z.object({\r\n      description: z.string(),\r\n      estimatedCost: z.number(),\r\n      affectedAreas: z.string(),\r\n    }),\r\n    actionsTaken: z.string(),\r\n    recommendations: z.string(),\r\n    weatherConditions: z.string(),\r\n    responseTime: z.string(),\r\n    resourcesDeployed: z.string(),\r\n    challengesFaced: z.string(),\r\n    lessonsLearned: z.string(),\r\n    attachments: z.array(z.instanceof(File)),\r\n  }).optional(),\r\n});\r\n\r\nexport type Report = z.infer<typeof ReportSchema>;\r\n\r\nexport const ReportConfigSchema = z.object({\r\n  type: z.enum(['emergency', 'user', 'system', 'custom']),\r\n  dateRange: z.object({\r\n    start: z.string(),\r\n    end: z.string(),\r\n  }),\r\n  format: z.enum(['pdf', 'csv', 'excel']),\r\n  filters: z.record(z.any()),\r\n});\r\n\r\nexport type ReportConfig = z.infer<typeof ReportConfigSchema>;\r\n\r\nexport class APIError extends Error {\r\n  constructor(public status: number, message: string) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const fetchReports = async (): Promise<Report[]> => {\r\n  const response = await fetch('/api/reports');\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to fetch reports');\r\n  }\r\n  const data = await response.json();\r\n  return ReportSchema.array().parse(data);\r\n};\r\n\r\nexport const generateReport = async (config: ReportConfig): Promise<Report> => {\r\n  const response = await fetch('/api/reports/generate', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(config),\r\n  });\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to generate report');\r\n  }\r\n  const data = await response.json();\r\n  return ReportSchema.parse(data);\r\n};\r\n\r\nexport const downloadReport = async (reportId: string): Promise<Blob> => {\r\n  const response = await fetch(`/api/reports/${reportId}/download`);\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to download report');\r\n  }\r\n  return response.blob();\r\n};\r\n\r\nexport const deleteReport = async (reportId: string): Promise<void> => {\r\n  const response = await fetch(`/api/reports/${reportId}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to delete report');\r\n  }\r\n}; "]}