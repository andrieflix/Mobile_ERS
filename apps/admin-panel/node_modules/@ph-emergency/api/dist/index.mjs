import {z}from'zod';var n=z.object({id:z.string(),title:z.string(),type:z.enum(["emergency","user","system","custom"]),status:z.enum(["pending","completed","failed"]),generatedBy:z.string(),createdAt:z.string(),fileSize:z.string()}),i=z.object({type:z.enum(["emergency","user","system","custom"]),dateRange:z.object({start:z.string(),end:z.string()}),format:z.enum(["pdf","csv","excel"]),filters:z.record(z.any())}),r=class extends Error{constructor(s,a){super(a);this.status=s;this.name="APIError";}},c=async()=>{let o=await fetch("/api/reports");if(!o.ok)throw new r(o.status,"Failed to fetch reports");let t=await o.json();return n.array().parse(t)},d=async o=>{let t=await fetch("/api/reports/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok)throw new r(t.status,"Failed to generate report");let s=await t.json();return n.parse(s)},m=async o=>{let t=await fetch(`/api/reports/${o}/download`);if(!t.ok)throw new r(t.status,"Failed to download report");return t.blob()},f=async o=>{let t=await fetch(`/api/reports/${o}`,{method:"DELETE"});if(!t.ok)throw new r(t.status,"Failed to delete report")};export{r as APIError,i as ReportConfigSchema,n as ReportSchema,f as deleteReport,m as downloadReport,c as fetchReports,d as generateReport};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map