{"version":3,"sources":["../src/index.ts"],"names":["ReportSchema","z","ReportConfigSchema","APIError","status","message","fetchReports","response","data","generateReport","config","downloadReport","reportId","deleteReport"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from 'zod';\r\n\r\nexport const ReportSchema = z.object({\r\n  id: z.string(),\r\n  title: z.string(),\r\n  type: z.enum(['emergency', 'user', 'system', 'custom']),\r\n  status: z.enum(['pending', 'completed', 'failed']),\r\n  generatedBy: z.string(),\r\n  createdAt: z.string(),\r\n  fileSize: z.string(),\r\n});\r\n\r\nexport type Report = z.infer<typeof ReportSchema>;\r\n\r\nexport const ReportConfigSchema = z.object({\r\n  type: z.enum(['emergency', 'user', 'system', 'custom']),\r\n  dateRange: z.object({\r\n    start: z.string(),\r\n    end: z.string(),\r\n  }),\r\n  format: z.enum(['pdf', 'csv', 'excel']),\r\n  filters: z.record(z.any()),\r\n});\r\n\r\nexport type ReportConfig = z.infer<typeof ReportConfigSchema>;\r\n\r\nexport class APIError extends Error {\r\n  constructor(public status: number, message: string) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const fetchReports = async (): Promise<Report[]> => {\r\n  const response = await fetch('/api/reports');\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to fetch reports');\r\n  }\r\n  const data = await response.json();\r\n  return ReportSchema.array().parse(data);\r\n};\r\n\r\nexport const generateReport = async (config: ReportConfig): Promise<Report> => {\r\n  const response = await fetch('/api/reports/generate', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(config),\r\n  });\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to generate report');\r\n  }\r\n  const data = await response.json();\r\n  return ReportSchema.parse(data);\r\n};\r\n\r\nexport const downloadReport = async (reportId: string): Promise<Blob> => {\r\n  const response = await fetch(`/api/reports/${reportId}/download`);\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to download report');\r\n  }\r\n  return response.blob();\r\n};\r\n\r\nexport const deleteReport = async (reportId: string): Promise<void> => {\r\n  const response = await fetch(`/api/reports/${reportId}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new APIError(response.status, 'Failed to delete report');\r\n  }\r\n}; "]}