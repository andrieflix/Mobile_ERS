import {z}from'zod';var n=z.object({id:z.string(),title:z.string(),type:z.enum(["emergency","user","system","custom"]),status:z.enum(["pending","completed","failed"]),generatedBy:z.string(),createdAt:z.string(),updatedAt:z.string(),fileSize:z.string(),format:z.enum(["pdf","csv","excel"]).optional(),dateRange:z.object({start:z.string(),end:z.string()}).optional(),incidentDetails:z.object({incidentId:z.number(),cause:z.string(),casualties:z.object({fatalities:z.number(),injuries:z.number(),missing:z.number()}),propertyDamage:z.object({description:z.string(),estimatedCost:z.number(),affectedAreas:z.string()}),actionsTaken:z.string(),recommendations:z.string(),weatherConditions:z.string(),responseTime:z.string(),resourcesDeployed:z.string(),challengesFaced:z.string(),lessonsLearned:z.string(),attachments:z.array(z.instanceof(File))}).optional()}),p=z.object({type:z.enum(["emergency","user","system","custom"]),dateRange:z.object({start:z.string(),end:z.string()}),format:z.enum(["pdf","csv","excel"]),filters:z.record(z.any())}),o=class extends Error{constructor(s,a){super(a);this.status=s;this.name="APIError";}},c=async()=>{let r=await fetch("/api/reports");if(!r.ok)throw new o(r.status,"Failed to fetch reports");let t=await r.json();return n.array().parse(t)},d=async r=>{let t=await fetch("/api/reports/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new o(t.status,"Failed to generate report");let s=await t.json();return n.parse(s)},g=async r=>{let t=await fetch(`/api/reports/${r}/download`);if(!t.ok)throw new o(t.status,"Failed to download report");return t.blob()},m=async r=>{let t=await fetch(`/api/reports/${r}`,{method:"DELETE"});if(!t.ok)throw new o(t.status,"Failed to delete report")};export{o as APIError,p as ReportConfigSchema,n as ReportSchema,m as deleteReport,g as downloadReport,c as fetchReports,d as generateReport};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map